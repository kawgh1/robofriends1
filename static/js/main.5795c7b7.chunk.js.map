{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","src","style","height","width","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","overflow","border","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOA6BeA,EAzBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAGvB,OAYM,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BH,GAAMI,MAAO,CAACC,OAAQ,QAASC,MAAO,SAAUC,IAAI,UACtF,6BACI,4BAAKR,GACL,2BAAIE,MCAHO,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAMZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAGnC,OAAO,kBAAC,EAAD,CAAMC,IAAMD,EAAGb,GAAIS,EAAOI,GAAGb,GAAID,KAAMU,EAAOI,GAAGd,KAAME,MAAOQ,EAAOI,GAAGZ,WAGhF,OACC,6BACMS,ICJOK,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKd,UAAU,OACd,2BAAOA,UAAU,mCACfe,KAAK,SAASC,YAAY,mBAC1BC,SAAUH,MCKAI,EAVA,SAACC,GAEf,OACC,yBAAKjB,MAAO,CAACkB,SAAU,SAAUC,OAAQ,oBAAqBlB,OAAQ,UACpEgB,EAAMG,WCgBKC,G,wDAnBd,WAAYJ,GAAQ,IAAD,8BAClB,cAAMA,IACDK,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAIG,KAAKJ,MAAMC,SACP,uDAGDG,KAAKT,MAAMG,a,GAhBQQ,IAAMC,YCsFnBC,E,kDAtEd,aAAe,IAAD,8BACb,gBA4BDC,eAAiB,SAACC,GAEjB,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SA7BzC,EAAKb,MAAQ,CACZjB,OAAQ,GACR4B,YAAa,IAJD,E,gEAQO,IAAD,OAUnBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEtB,OAAOmC,S,+BAa7B,IAAD,OAEFC,EAAiBf,KAAKJ,MAAMjB,OAAOqC,QAAO,SAAAC,GAC/C,OAAOA,EAAMhD,KAAKiD,cAAcC,SAAS,EAAKvB,MAAMW,YAAYW,kBAQjE,OAAiC,IAA7BlB,KAAKJ,MAAMjB,OAAOyC,OACd,0CAIN,yBAAKhD,UAAY,MAEjB,wBAAIA,UAAU,MAAd,eAGC,kBAAC,EAAD,CAAWc,aAAcc,KAAKK,iBAE/B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQoC,W,GA3DLb,IAAMC,WCLJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,OAECC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.5795c7b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const Card = (props) => {\r\n// destructuring props right inside of their call, see above\r\nconst Card = ({name, id, email}) => {\r\n        // this avoids have to write props.name, props.email, every time you want to use it\r\n        // const {name, email, id} = props\r\n  return (\r\n        // this is JSX read by React, not HTML\r\n        // can only return a single element, \r\n        // like a single div container or an array\r\n\r\n        // initially it was\r\n        // <h2>Jane Doe</h2>\r\n        // <p>jane.doe@gmail.com</p>\r\n\r\n        // back ticks `` on the img src\r\n\r\n        // tachyon classNames bg-light-green\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n          <img src={`https://robohash.org/${id}`} style={{height: '200px', width: '200px'}} alt='ROBOT'/>\r\n          <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n          </div>\r\n        </div>\r\n        );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t// Error Boundary test\r\n\t// if (true) {\r\n\t// \tthrow new Error('NOOOOOOOOOOO!');\r\n\t// }\r\n\r\n\tconst cardArray = robots.map((user, i) => {\r\n\t\t// have to assign an id or a key to  to each DOM object, otherwise React loses track\r\n\t\t// if an object is deleted, it doesn't know which one and has reload the whole page\r\n\t\treturn <Card key= {i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t    {cardArray}\r\n  \t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\t\ttype='search' placeholder='search robots...'\r\n\t\t\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\t\t<div style={{overflow: 'scroll', border: '2px solid #0ccac4', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oops. That is not good.</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n// robots copy and pasted in pre-made file\r\n// files with multiple exports must be desctructured like this\r\n\r\n// no longer using an array of robots, we are now \r\n// initializing with an empty array and using a lifecycle hook to grab them from somewhere else\r\n// import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport '../containers/App.css';\r\n\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n// because 'App' now owns 'state', it's allowed to change it\r\n// and since it is the root node, when it changes state\r\n// all children nodes are updated that are affected\r\nclass App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// .then(response => {\r\n\t\t// \treturn response.json();\r\n\t\t// })\r\n\t\t// .then(users => {\r\n\t\t// \tthis.setState({ robots:users })\r\n\t\t// })\r\n\r\n\t\t// same as\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots:users }));\r\n\r\n\t}\r\n\r\n\t// because the event occurred on the Virtual DOM Window object,\r\n\t// 'this' is the input and not the filteredRobots\r\n\t// so need to change the method structure (same for all custom React functions)\r\n\r\n\t// onSearchChange(event){ need to be\r\n\tonSearchChange = (event) => {\r\n\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\trender() {\r\n\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\r\n\t\t\t// print out whatever is typed in the event\r\n\t\t\t// console.log(event.target.value);\r\n\t\t\t// console.log(filteredRobots);\r\n\r\n\t\t})\r\n\r\n\t\tif (this.state.robots.length === 0){\r\n\t\t\treturn <h1>Loading...</h1>\r\n\t\t} else {\r\n\t\t// was <CardList robots={this.state.robots}/>\r\n\t\t\treturn (\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\r\n\t\t\t\t<h1 className='f2'>Robofriends</h1>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n// tachyons imported with npm install tachyons in directory folder\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t<App/>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}